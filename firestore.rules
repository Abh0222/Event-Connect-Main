rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isCreator() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/creators/$(request.auth.uid));
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isCreatorOrAdmin() {
      return isCreator() || isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Events collection
    match /events/{eventId} {
      // Anyone can read published events
      allow read: if resource.data.status == 'published' || 
                     isCreatorOrAdmin() ||
                     (isAuthenticated() && resource.data.creatorId == request.auth.uid);
      
      // Only creators can create events
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.creatorId &&
                       isCreator();
      
      // Only event creator or admin can update
      allow update: if isAuthenticated() && 
                       (request.auth.uid == resource.data.creatorId || isAdmin());
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Packages collection
    match /packages/{packageId} {
      // Anyone can read packages
      allow read: if true;
      
      // Only creators and admins can create/update packages
      allow create, update: if isCreatorOrAdmin();
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      // Users can read their own bookings, creators can read bookings for their events
      allow read: if isOwner(resource.data.userId) || 
                     isAdmin() ||
                     (isAuthenticated() && 
                      exists(/databases/$(database)/documents/events/$(resource.data.eventId)) &&
                      get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.creatorId == request.auth.uid);
      
      // Authenticated users can create bookings
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      
      // Users can update their own bookings, creators can update status
      allow update: if isOwner(resource.data.userId) || 
                       isAdmin() ||
                       (isAuthenticated() && 
                        exists(/databases/$(database)/documents/events/$(resource.data.eventId)) &&
                        get(/databases/$(database)/documents/events/$(resource.data.eventId)).data.creatorId == request.auth.uid);
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Creators collection
    match /creators/{creatorId} {
      // Anyone can read creator profiles
      allow read: if true;
      
      // Only the creator themselves can create/update their profile
      allow create: if isAuthenticated() && 
                       request.auth.uid == creatorId &&
                       request.auth.uid == request.resource.data.userId;
      
      allow update: if isOwner(creatorId) || isAdmin();
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Chat sessions collection
    match /chat_sessions/{sessionId} {
      // Users can read their own chat sessions
      allow read: if isOwner(resource.data.userId) || isAdmin();
      
      // Authenticated users can create chat sessions
      allow create: if isAuthenticated() && 
                       (request.resource.data.userId == null || 
                        request.resource.data.userId == request.auth.uid);
      
      // Users can update their own chat sessions
      allow update: if resource.data.userId == null || 
                       isOwner(resource.data.userId) || 
                       isAdmin();
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // FAQs collection
    match /faqs/{faqId} {
      // Anyone can read FAQs
      allow read: if true;
      
      // Only admins can create/update/delete FAQs
      allow create, update, delete: if isAdmin();
    }
    
    // Support threads collection
    match /support_threads/{threadId} {
      // Users can read their own support threads, creators and admins can read all
      allow read: if isOwner(resource.data.userId) || isCreatorOrAdmin();
      
      // Authenticated users can create support threads
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      
      // Users can update their own threads, creators and admins can update all
      allow update: if isOwner(resource.data.userId) || isCreatorOrAdmin();
      
      // Only admin can delete
      allow delete: if isAdmin();
    }
    
    // Analytics events collection
    match /analytics_events/{eventId} {
      // Only admins can read analytics
      allow read: if isAdmin();
      
      // Anyone can create analytics events (for tracking)
      allow create: if true;
      
      // Only admins can update/delete
      allow update, delete: if isAdmin();
    }
    
    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
