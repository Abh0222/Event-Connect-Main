rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidVideoFile() {
      return request.resource.contentType.matches('video/.*') &&
             request.resource.size < 100 * 1024 * 1024; // 100MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType.matches('application/pdf') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Event images - organized by event ID
    match /images/events/{eventId}/{imageId} {
      // Anyone can read published event images
      allow read: if true;
      
      // Only authenticated users can upload event images
      allow write: if isAuthenticated() && isValidImageFile();
      
      // Only the creator or admin can delete
      allow delete: if isAuthenticated();
    }
    
    // Event videos - organized by event ID
    match /videos/events/{eventId}/{videoId} {
      // Anyone can read published event videos
      allow read: if true;
      
      // Only authenticated users can upload event videos
      allow write: if isAuthenticated() && isValidVideoFile();
      
      // Only the creator or admin can delete
      allow delete: if isAuthenticated();
    }
    
    // User profile images
    match /images/users/{userId}/{imageId} {
      // Anyone can read profile images
      allow read: if true;
      
      // Only the user themselves can upload their profile image
      allow write: if isOwner(userId) && isValidImageFile();
      
      // Only the user themselves can delete their profile image
      allow delete: if isOwner(userId);
    }
    
    // Creator portfolio images
    match /images/creators/{creatorId}/{imageId} {
      // Anyone can read creator portfolio images
      allow read: if true;
      
      // Only the creator themselves can upload portfolio images
      allow write: if isOwner(creatorId) && isValidImageFile();
      
      // Only the creator themselves can delete portfolio images
      allow delete: if isOwner(creatorId);
    }
    
    // Document storage (brochures, contracts, etc.)
    match /docs/{path=**} {
      // Only authenticated users can read documents
      allow read: if isAuthenticated();
      
      // Only authenticated users can upload documents
      allow write: if isAuthenticated() && isValidDocumentFile();
      
      // Only authenticated users can delete documents they uploaded
      allow delete: if isAuthenticated();
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      // Only the user can read their temp files
      allow read: if isOwner(userId);
      
      // Only the user can upload to their temp folder
      allow write: if isOwner(userId) && 
                      (isValidImageFile() || isValidVideoFile() || isValidDocumentFile());
      
      // Only the user can delete their temp files
      allow delete: if isOwner(userId);
    }
    
    // Chat attachments
    match /chat/attachments/{sessionId}/{fileName} {
      // Only authenticated users can read chat attachments
      allow read: if isAuthenticated();
      
      // Only authenticated users can upload chat attachments
      allow write: if isAuthenticated() && 
                      (isValidImageFile() || isValidDocumentFile()) &&
                      request.resource.size < 5 * 1024 * 1024; // 5MB limit for chat
      
      // Only authenticated users can delete chat attachments
      allow delete: if isAuthenticated();
    }
    
    // Default deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
